<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/08/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo+GitHubPages搭建个人博客</title>
    <url>/2024/09/04/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>Hexo 是一个高效的静态网站生成器，使用简洁的 Markdown（或其他模板引擎）编写内容，支持丰富的插件和主题，允许用户轻松定制网站。它通过将文本转换为静态HTML页面，使得网站加载速度快，易于部署，同时支持多平台发布，非常适合创建博客、文档或个人网站。本文将介绍如何使用Hexo搭建个人博客并且将博客文章免费放到github上。</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>本机是Windows 10 专业版，此教程适用于Windows10， Windows11各版本。Hexo是基于Node.js的框架，同时我们要用到git进行部署。</p>
<p>软件需求：</p>
<ul>
<li><a href="https://nodejs.org/en">Node.js官网 (nodejs.org)</a></li>
<li><a href="https://git-scm.com/">Git官网 (git-scm.com)</a></li>
</ul>
<p>软件安装教程</p>
<ul>
<li><a href="https://blog.csdn.net/middle_age666/article/details/141157261">Node.js图文安装教程</a></li>
<li><a href="https://blog.csdn.net/middle_age666/article/details/141157518">Git图文安装教程</a></li>
</ul>
<h2 id="本地搭建Hexo环境"><a href="#本地搭建Hexo环境" class="headerlink" title="本地搭建Hexo环境"></a>本地搭建Hexo环境</h2><p>官网地址：<a href="https://hexo.io/zh-cn/">Hexo</a></p>
<p>在电脑硬盘上任意位置新建存放blog文件的文件，例如d:\blog。本文将以d:\hexo_blog文件夹来演示如何搭建环境，同学可以根据你自己的情况建立文件夹。</p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2bd76bf8b6020d435a950977b1d21dbb.png"></p>
<h3 id="使用Git-Bash初始化环境"><a href="#使用Git-Bash初始化环境" class="headerlink" title="使用Git Bash初始化环境"></a>使用Git Bash初始化环境</h3><p>进入此文件夹，在任意空白处点击右键，在右键菜单中选择<code>Open Git Bash here</code>，打开<code>Git Bash</code>窗口。如果右键菜单中无此选项，请检查环境搭建是否成功。<a href="https://blog.csdn.net/viman3344/article/details/140571500">Git图文安装教程</a></p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/0dee228706ea30b6533e792eb021ac2c.png"></p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ab9464da053e23929b4800bc3aa10513.png"></p>
<p>打开之后输入以下命令修改npm的源为阿里的源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/63e468094dedac489772be5771abc0d4.png"></p>
<p>执行完成之后，输入以下命令一键安装hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/217714883cd5f676715b5bfa2132f25a.png"></p>
<p>完成之后再依次执行以下命令并回车，启动初始化并安装组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>命令执行完毕之后，文件夹里会增加类似以下的文件目录，安装完成。</p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/736ca4aae3a88e31a1b174ba06c78215.png"></p>
<blockquote>
<p>[!CAUTION]</p>
<p>可能遇到的问题：</p>
<p>输入<code>hexo init</code>后,可能卡在<code>INFO Install dependencies</code>不动，此时需按下Ctrl+C停止此命令，继续输入<code>npm install</code>即可。</p>
</blockquote>
<h3 id="启动Hexo服务"><a href="#启动Hexo服务" class="headerlink" title="启动Hexo服务"></a>启动Hexo服务</h3><p>安装完成之后，在hexo博客目录下执行以下命令开启Hexo服务（默认情况下，访问网址为： <code>http://localhost:4000/</code>）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>见到如下图界面表名Hexo服务启动成功。打开浏览器输入<code>http://localhost:4000/</code>即可看到博客预览界面。</p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/fdaaf03aa4620ecb139c21c15479dda8.png"></p>
<p>启动过程中如果出现<code>Windows安全中心警报</code>，需要点<code>允许访问</code>。</p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/f97b32100fbba249a35a32e730787194.png"></p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/e821cc3b146497b45eebf96f5ee35439.png"></p>
<p>恭喜，Hexo服务启动成功！！！其他详细设置，可参考官方文档继续完善。</p>
<h2 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h2><h3 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h3><p>登录GitHub账号之后新建一个仓库，仓库名为<code>用户名.github.io</code>，这里的用户名替换为你自己GitHub上的用户名。</p>
<p>比如你的用户名是ABc123，新建的仓库名就是abc123.github.io</p>
<p>没有Github账号的同学可以参考教程注册。</p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02060262b75c117701c6289757f065dd.png"></p>
<p>创建时，选择<code>Public</code>类型。勾选<code>Add a README file</code>来创建默认的<code>main</code>分支。 仓库名为<code>用户名.github.io</code>。填写完毕之后点击<code>Create repository</code>按钮完成创建。</p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2de02ff5fc44380ce2733159b7ec7625.png"></p>
<h3 id="为GitHub账号设置ssh"><a href="#为GitHub账号设置ssh" class="headerlink" title="为GitHub账号设置ssh"></a>为GitHub账号设置ssh</h3><h4 id="设置本地git账号"><a href="#设置本地git账号" class="headerlink" title="设置本地git账号"></a>设置本地git账号</h4><p>在刚才的<code>Git Bash</code>窗口中输入以下命令并回车，将其中你的GitHub信息替换掉。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/74d8f6e6525148660d5ab031f2bac751.png"></p>
<p>生成之后，去当前用户名的文件夹下的.ssh文件夹中找到<code>id_rsa.pub</code>密钥文件，用文本编辑器打开并<strong>复制其内容</strong>。</p>
<p>当前用户名的文件一般是<code>C:\Users\Administrator\.ssh</code>，如果当前系统用户不是Administrator，只需要把Administrator换成你的用户名即可。</p>
<h4 id="在GitHub新建ssh-key"><a href="#在GitHub新建ssh-key" class="headerlink" title="在GitHub新建ssh key"></a>在GitHub新建ssh key</h4><p>回到浏览器，在github的页面中点击右上角的用户头像按钮，在弹出的菜单中选择<code>Settings</code>功能。</p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ef046679e31879212468fbe271b5e8ca.png"></p>
<p>在新页面中点击左侧菜单中的<code>SSH and GPG keys</code>按钮进入SSH keys设置页面。</p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/39941c77513ba90541ce43db8af0b220.png"></p>
<p>点击页面右侧的<code>New SSH key</code>按钮，新增ssh key</p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/b6ccad02e405ab65af4ab96d1b22755c.png"></p>
<p>在新页面中如下图填写并点击按钮保存。</p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/237c295ba249a84839dfad07790a92ae.png"></p>
<p>在Git Bash中检测GitHub公钥设置是否成功，输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure>

<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1133696f2415e2843573722e96ee3b2f.png"></p>
<p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>
<h3 id="将博客部署到GitHub"><a href="#将博客部署到GitHub" class="headerlink" title="将博客部署到GitHub"></a>将博客部署到GitHub</h3><p>在刚才的<code>Git Bash</code>窗口中输入以下命令，安装hexo-deployer-git插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/fdaaf03aa4620ecb139c21c15479dda8.png"></p>
<p>打开博客文件夹中的<code>_config.yml</code>文件，找到其中<code>deploy</code>的部分并更改deploy的内容，用户名替换为自己的github用户名，修改完成之后保存并关闭该文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p>回到<code>Git Bash</code>窗口，输入以下命令生成静态文件并上传GitHub：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/d10ccd0186bc0517c9662288c54a5054.png"></p>
<p>恭喜你已经成功配置好了ssh连接GitHub，并已经把生成的静态页面上传github成功了。</p>
<p>接下来可以在浏览器中打开<code>**https://用户名.github.io**</code>查看你的博客效果，快去试一下吧。</p>
<p><img src="/../img/Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/e821cc3b146497b45eebf96f5ee35439.png"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo博客搭建教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows系统上Git详细图文安装及使用教程</title>
    <url>/2024/09/04/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8AGit%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>Git 是一种高效、分布式的<a href="https://so.csdn.net/so/search?q=%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F&spm=1001.2101.3001.7020">版本控制系统</a>，用于代码的跟踪、分支管理和协同工作，支持快速提交、合并和回滚操作。它是开发者工具箱中必不可少的工具之一，广泛应用于软件开发和其他需要版本控制的领域。</p>
<h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2><h3 id="Git下载"><a href="#Git下载" class="headerlink" title="Git下载"></a>Git下载</h3><p>可以通过以下任意链接下载<a href="https://so.csdn.net/so/search?q=Git%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F&spm=1001.2101.3001.7020">Git安装程序</a></p>
<ul>
<li><strong><a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">阿里镜像链接</a>（建议从这里下载，速度很快）</strong></li>
<li><a href="https://git-scm.com/">git-scm.com</a>（官方网站，提供了各个平台（Windows、Mac、Linux）的安装程序）</li>
<li><a href="https://gitforwindows.org/">gitforwindows.org</a>（只有 windows 系统的安装包）</li>
</ul>
<p>本文下载发文之时最新的git版本：<code>Git-2.45.2-64-bit.exe</code></p>
<h4 id="使用许可说明"><a href="#使用许可说明" class="headerlink" title="使用许可说明"></a>使用许可说明</h4><p>双击下载后的<code>Git-2.45.2-64-bit.exe</code>，开始安装，这个界面主要展示了 GPL 第 2 版协议1的内容，点击 <code>Next</code> 进入下一步。</p>
<p><img src="/../img/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8AGit%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/6fa9fce383da14825c0d5f3002691dde.png"></p>
<h4 id="选择安装目录"><a href="#选择安装目录" class="headerlink" title="选择安装目录"></a>选择安装目录</h4><p>最好点击 “Browse…” 更换目录，<strong>尽量不要安装在C盘</strong>。点击 <code>Next</code> 进入下一步。</p>
<p><img src="/../img/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8AGit%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/ef815cc7c8ed635c6ae4347672842c38.png"></p>
<h4 id="选择安装组件"><a href="#选择安装组件" class="headerlink" title="选择安装组件"></a>选择安装组件</h4><p>大家根据自己的需要选择勾选。<strong>一般默认即可</strong>，点击<code>Next</code> 进入下一步。</p>
<p><img src="/../img/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8AGit%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/6ae144a947024ed608752387e227aa02.png"></p>
<blockquote>
<p>[!TIP]</p>
<p>接下来，<strong>一般默认即可</strong>，点击<code>Next</code> 进入安装完成。</p>
</blockquote>
<p><img src="/../img/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8AGit%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/4cab97fc637410660a0f19e80b6ffc5b.png"></p>
<h3 id="Git的功能简介"><a href="#Git的功能简介" class="headerlink" title="Git的功能简介"></a>Git的功能简介</h3><p>安装完成之后，在开始菜单里能够看到如下列表。</p>
<p><img src="/../img/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8AGit%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/e53669910652a32ce1c4b1f8674fa323.png"></p>
<p>有 <code>Git Bash</code>、<code>Git CMD</code>、<code>Git FAQs</code>、<code>Git GUI</code>、<code>Git Release Note</code>，下面我们就分别介绍一下这几个。</p>
<h4 id="Git-Bash"><a href="#Git-Bash" class="headerlink" title="Git Bash"></a>Git Bash</h4><p><strong>描述</strong>： <code>Git Bash</code> 是一个命令行工具，提供了类似于 Linux Shell 的环境，使用户能够在 Windows 系统上使用类Unix命令。<br><strong>用途</strong>： 通过 Git Bash，用户可以使用 Git 的命令行功能，执行版本控制任务，例如克隆仓库、提交更改等。</p>
<p><img src="/../img/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8AGit%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/67a4bb4f718042e960151cff0c67c513.png"></p>
<h4 id="Git-CMD"><a href="#Git-CMD" class="headerlink" title="Git CMD"></a>Git CMD</h4><p>Git CMD 不能说和 cmd 完全一样，只能说一模一样，功能少得可怜，如下图：</p>
<p><img src="/../img/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8AGit%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/58baf7e759c53391c4befbf1eb9b22c7.png"></p>
<h4 id="Git-FAQs"><a href="#Git-FAQs" class="headerlink" title="Git FAQs"></a>Git FAQs</h4><p>Git FAQs 就是 Git Frequently Asked Questions（常问问题），访问地址：<a href="https://github.com/git-for-windows/git/wiki/FAQ">https://github.com/git-for-windows/git/wiki/FAQ</a></p>
<h4 id="Git-GUI"><a href="#Git-GUI" class="headerlink" title="Git GUI"></a>Git GUI</h4><p>Git GUI 就是 Git 的图形化界面。通过 Git GUI，用户可以更直观地查看仓库状态、提交更改、查看历史记录等，适用于那些不太习惯使用命令行的用户。如下图</p>
<p><img src="/../img/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8AGit%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/811c680591a8d86ce78fb3a7f26e6edd.png"></p>
<h4 id="Git-Release-Note"><a href="#Git-Release-Note" class="headerlink" title="Git Release Note"></a>Git Release Note</h4><p>Git Release Note 就是版本说明，增加了什么功能，修复了什么 bug 之类的。</p>
<h2 id="Git的基本使用"><a href="#Git的基本使用" class="headerlink" title="Git的基本使用"></a>Git的基本使用</h2><h3 id="基本的名词和概念"><a href="#基本的名词和概念" class="headerlink" title="基本的名词和概念"></a>基本的名词和概念</h3><p>在 Git 版本控制系统中，有一些基本的名词和概念，它们构成了 Git 工作流程的基础。下面是一些核心概念的简要介绍：</p>
<ul>
<li>仓库（Repository）：存放项目文件和版本信息的地方，可以是本地的也可以是远程的。</li>
<li>工作目录（Working Directory）：仓库中的文件被检出到一个目录，这个目录就是工作目录，你可以在这里修改文件。</li>
<li>暂存区（Staging Area）：也称为索引，是一个准备下次提交的文件列表，你可以在这里选择哪些更改将被包括在提交中。</li>
<li>提交（Commit）：将暂存区的更改永久保存到仓库的版本历史中。</li>
<li>分支（Branch）：分支是开发线的起点，你可以创建分支来开发新功能或修复错误，而不会影响主分支。</li>
<li>合并（Merge）：将一个分支的更改合并到另一个分支中，通常是将特性分支的更改合并回主分支。</li>
<li>远程仓库（Remote Repository）：通常是一个服务器上的仓库，用于多人协作，你可以推送（push）和拉取（pull）更改。</li>
<li>克隆（Clone）：从远程仓库复制仓库到本地，包括所有分支和标签。</li>
<li>拉取（Pull）：从远程仓库获取最新的更改并合并到你的本地分支。</li>
<li>推送（Push）：将你的本地分支的更改发送到远程仓库。</li>
<li>标签（Tag）：标记特定的提交，通常用于版本发布。</li>
<li>冲突（Conflict）：当两个分支中的相同文件的同一行被修改，合并时 Git 无法自动解决，需要手动解决。</li>
<li>HEAD：指向当前分支的最新提交。</li>
<li>索引（Index）：有时与暂存区同义，是准备下一次提交的文件列表。</li>
<li>变基（Rebase）：将一系列提交从一个分支上重新应用到另一个分支上，以保持线性的提交历史。</li>
</ul>
<h3 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h3><p>Git 的命令和操作是 Git 版本控制系统中的核心部分，下面是一些基本的 Git 命令和它们通常的操作步骤：</p>
<p><strong>初始化仓库</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p><strong>检出仓库</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>

<p><strong>查看状态</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>查看当前工作目录和暂存区的状态。</p>
<p><strong>添加文件到暂存区</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add [file]</span><br></pre></td></tr></table></figure>

<p>将文件或更改添加到暂存区，准备下一次提交。</p>
<p><strong>查看差异</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>

<p>查看工作目录与暂存区或最后一次提交之间的差异。</p>
<p><strong>提交更改</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;commit message&quot;</span><br></pre></td></tr></table></figure>

<p>将暂存区的更改提交到仓库。</p>
<p><strong>查看提交历史</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p>查看项目的提交历史。</p>
<p><strong>创建分支</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch [branch-name]</span><br></pre></td></tr></table></figure>

<p>创建一个新的分支。</p>
<p><strong>切换分支</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout [branch-name]</span><br></pre></td></tr></table></figure>

<p>切换到指定的分支。</p>
<p><strong>合并分支</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge [branch-name]</span><br></pre></td></tr></table></figure>

<p>将一个分支的更改合并到当前分支。</p>
<p><strong>拉取远程分支</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>从远程仓库拉取最新更改并自动合并到当前分支。</p>
<p><strong>推送到远程仓库</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote-name] [branch-name]</span><br></pre></td></tr></table></figure>

<p>将本地分支的更改推送到远程仓库。</p>
<p><strong>查看远程仓库</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>查看远程仓库的详细信息。</p>
<p><strong>删除分支</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d [branch-name]</span><br></pre></td></tr></table></figure>

<p>删除本地分支。</p>
<p><strong>查看文件更改</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff [branch-name]</span><br></pre></td></tr></table></figure>

<p>查看当前分支与另一个分支的差异。</p>
<p><strong>重置更改</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset [file]</span><br></pre></td></tr></table></figure>

<p>将文件从暂存区撤销到工作目录。</p>
<p><strong>查看分支图</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --all --graph</span><br></pre></td></tr></table></figure>

<p>以图形方式查看所有分支。</p>
<p><strong>变基分支</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase [branch-name]</span><br></pre></td></tr></table></figure>

<p>将当前分支上的提交重新应用到另一个分支上。</p>
<p><strong>标签管理</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag [tag-name]</span><br></pre></td></tr></table></figure>

<p>给当前提交打上标签，通常用于版本发布。</p>
<p>这些命令和操作步骤是 Git 使用中的基础，掌握它们可以帮助你更有效地进行版本控制。</p>
<p>Git 拥有一个庞大的命令集，这些命令覆盖了从基础到高级的多种使用场景。在开始使用 Git 之前，建议您先学习一些基础的版本控制概念。通过不断的实践和探索，您将逐步深入了解 Git 的强大功能。Git 的真正魅力在于它的灵活性和丰富功能，它能够适应各种复杂的开发环境和工作流程。</p>
<p>另外，对以下内容感兴趣的同学请移步对应教程：</p>
<p><a href="https://0ks.cn/subscribe-chatgpt-plus-in-five-minutes/">GPT-4o教程</a><br><a href="https://0ks.cn/peo-register-guide/">Poe教程</a><br><a href="https://0ks.cn/fantia-register-guide/">Fantia注册指南</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>hexo博客搭建之Git</tag>
      </tags>
  </entry>
</search>
